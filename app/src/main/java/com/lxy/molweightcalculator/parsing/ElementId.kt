package com.lxy.molweightcalculator.parsing

import com.lxy.molweightcalculator.BuildConfig
import com.lxy.molweightcalculator.contract.Contract
import com.lxy.molweightcalculator.contract.Value
import com.lxy.molweightcalculator.util.FormatUtil
import com.lxy.molweightcalculator.util.div26


@JvmInline
value class ElementId(val value: Char) {
    companion object {
        private val ELEMENT_NAME_TWO_CHARS = shortArrayOf(
            0x6141, 0x6241, 0x6341, 0x6441, 0x6541, 0x6641, 0x6741, 0x6841, 0x6941, 0x6a41, 0x6b41,
            0x6c41, 0x6d41, 0x6e41, 0x6f41, 0x7041, 0x7141, 0x7241, 0x7341, 0x7441, 0x7541, 0x7641,
            0x7741, 0x7841, 0x7941, 0x7a41, 0x6142, 0x6242, 0x6342, 0x6442, 0x6542, 0x6642, 0x6742,
            0x6842, 0x6942, 0x6a42, 0x6b42, 0x6c42, 0x6d42, 0x6e42, 0x6f42, 0x7042, 0x7142, 0x7242,
            0x7342, 0x7442, 0x7542, 0x7642, 0x7742, 0x7842, 0x7942, 0x7a42, 0x6143, 0x6243, 0x6343,
            0x6443, 0x6543, 0x6643, 0x6743, 0x6843, 0x6943, 0x6a43, 0x6b43, 0x6c43, 0x6d43, 0x6e43,
            0x6f43, 0x7043, 0x7143, 0x7243, 0x7343, 0x7443, 0x7543, 0x7643, 0x7743, 0x7843, 0x7943,
            0x7a43, 0x6144, 0x6244, 0x6344, 0x6444, 0x6544, 0x6644, 0x6744, 0x6844, 0x6944, 0x6a44,
            0x6b44, 0x6c44, 0x6d44, 0x6e44, 0x6f44, 0x7044, 0x7144, 0x7244, 0x7344, 0x7444, 0x7544,
            0x7644, 0x7744, 0x7844, 0x7944, 0x7a44, 0x6145, 0x6245, 0x6345, 0x6445, 0x6545, 0x6645,
            0x6745, 0x6845, 0x6945, 0x6a45, 0x6b45, 0x6c45, 0x6d45, 0x6e45, 0x6f45, 0x7045, 0x7145,
            0x7245, 0x7345, 0x7445, 0x7545, 0x7645, 0x7745, 0x7845, 0x7945, 0x7a45, 0x6146, 0x6246,
            0x6346, 0x6446, 0x6546, 0x6646, 0x6746, 0x6846, 0x6946, 0x6a46, 0x6b46, 0x6c46, 0x6d46,
            0x6e46, 0x6f46, 0x7046, 0x7146, 0x7246, 0x7346, 0x7446, 0x7546, 0x7646, 0x7746, 0x7846,
            0x7946, 0x7a46, 0x6147, 0x6247, 0x6347, 0x6447, 0x6547, 0x6647, 0x6747, 0x6847, 0x6947,
            0x6a47, 0x6b47, 0x6c47, 0x6d47, 0x6e47, 0x6f47, 0x7047, 0x7147, 0x7247, 0x7347, 0x7447,
            0x7547, 0x7647, 0x7747, 0x7847, 0x7947, 0x7a47, 0x6148, 0x6248, 0x6348, 0x6448, 0x6548,
            0x6648, 0x6748, 0x6848, 0x6948, 0x6a48, 0x6b48, 0x6c48, 0x6d48, 0x6e48, 0x6f48, 0x7048,
            0x7148, 0x7248, 0x7348, 0x7448, 0x7548, 0x7648, 0x7748, 0x7848, 0x7948, 0x7a48, 0x6149,
            0x6249, 0x6349, 0x6449, 0x6549, 0x6649, 0x6749, 0x6849, 0x6949, 0x6a49, 0x6b49, 0x6c49,
            0x6d49, 0x6e49, 0x6f49, 0x7049, 0x7149, 0x7249, 0x7349, 0x7449, 0x7549, 0x7649, 0x7749,
            0x7849, 0x7949, 0x7a49, 0x614a, 0x624a, 0x634a, 0x644a, 0x654a, 0x664a, 0x674a, 0x684a,
            0x694a, 0x6a4a, 0x6b4a, 0x6c4a, 0x6d4a, 0x6e4a, 0x6f4a, 0x704a, 0x714a, 0x724a, 0x734a,
            0x744a, 0x754a, 0x764a, 0x774a, 0x784a, 0x794a, 0x7a4a, 0x614b, 0x624b, 0x634b, 0x644b,
            0x654b, 0x664b, 0x674b, 0x684b, 0x694b, 0x6a4b, 0x6b4b, 0x6c4b, 0x6d4b, 0x6e4b, 0x6f4b,
            0x704b, 0x714b, 0x724b, 0x734b, 0x744b, 0x754b, 0x764b, 0x774b, 0x784b, 0x794b, 0x7a4b,
            0x614c, 0x624c, 0x634c, 0x644c, 0x654c, 0x664c, 0x674c, 0x684c, 0x694c, 0x6a4c, 0x6b4c,
            0x6c4c, 0x6d4c, 0x6e4c, 0x6f4c, 0x704c, 0x714c, 0x724c, 0x734c, 0x744c, 0x754c, 0x764c,
            0x774c, 0x784c, 0x794c, 0x7a4c, 0x614d, 0x624d, 0x634d, 0x644d, 0x654d, 0x664d, 0x674d,
            0x684d, 0x694d, 0x6a4d, 0x6b4d, 0x6c4d, 0x6d4d, 0x6e4d, 0x6f4d, 0x704d, 0x714d, 0x724d,
            0x734d, 0x744d, 0x754d, 0x764d, 0x774d, 0x784d, 0x794d, 0x7a4d, 0x614e, 0x624e, 0x634e,
            0x644e, 0x654e, 0x664e, 0x674e, 0x684e, 0x694e, 0x6a4e, 0x6b4e, 0x6c4e, 0x6d4e, 0x6e4e,
            0x6f4e, 0x704e, 0x714e, 0x724e, 0x734e, 0x744e, 0x754e, 0x764e, 0x774e, 0x784e, 0x794e,
            0x7a4e, 0x614f, 0x624f, 0x634f, 0x644f, 0x654f, 0x664f, 0x674f, 0x684f, 0x694f, 0x6a4f,
            0x6b4f, 0x6c4f, 0x6d4f, 0x6e4f, 0x6f4f, 0x704f, 0x714f, 0x724f, 0x734f, 0x744f, 0x754f,
            0x764f, 0x774f, 0x784f, 0x794f, 0x7a4f, 0x6150, 0x6250, 0x6350, 0x6450, 0x6550, 0x6650,
            0x6750, 0x6850, 0x6950, 0x6a50, 0x6b50, 0x6c50, 0x6d50, 0x6e50, 0x6f50, 0x7050, 0x7150,
            0x7250, 0x7350, 0x7450, 0x7550, 0x7650, 0x7750, 0x7850, 0x7950, 0x7a50, 0x6151, 0x6251,
            0x6351, 0x6451, 0x6551, 0x6651, 0x6751, 0x6851, 0x6951, 0x6a51, 0x6b51, 0x6c51, 0x6d51,
            0x6e51, 0x6f51, 0x7051, 0x7151, 0x7251, 0x7351, 0x7451, 0x7551, 0x7651, 0x7751, 0x7851,
            0x7951, 0x7a51, 0x6152, 0x6252, 0x6352, 0x6452, 0x6552, 0x6652, 0x6752, 0x6852, 0x6952,
            0x6a52, 0x6b52, 0x6c52, 0x6d52, 0x6e52, 0x6f52, 0x7052, 0x7152, 0x7252, 0x7352, 0x7452,
            0x7552, 0x7652, 0x7752, 0x7852, 0x7952, 0x7a52, 0x6153, 0x6253, 0x6353, 0x6453, 0x6553,
            0x6653, 0x6753, 0x6853, 0x6953, 0x6a53, 0x6b53, 0x6c53, 0x6d53, 0x6e53, 0x6f53, 0x7053,
            0x7153, 0x7253, 0x7353, 0x7453, 0x7553, 0x7653, 0x7753, 0x7853, 0x7953, 0x7a53, 0x6154,
            0x6254, 0x6354, 0x6454, 0x6554, 0x6654, 0x6754, 0x6854, 0x6954, 0x6a54, 0x6b54, 0x6c54,
            0x6d54, 0x6e54, 0x6f54, 0x7054, 0x7154, 0x7254, 0x7354, 0x7454, 0x7554, 0x7654, 0x7754,
            0x7854, 0x7954, 0x7a54, 0x6155, 0x6255, 0x6355, 0x6455, 0x6555, 0x6655, 0x6755, 0x6855,
            0x6955, 0x6a55, 0x6b55, 0x6c55, 0x6d55, 0x6e55, 0x6f55, 0x7055, 0x7155, 0x7255, 0x7355,
            0x7455, 0x7555, 0x7655, 0x7755, 0x7855, 0x7955, 0x7a55, 0x6156, 0x6256, 0x6356, 0x6456,
            0x6556, 0x6656, 0x6756, 0x6856, 0x6956, 0x6a56, 0x6b56, 0x6c56, 0x6d56, 0x6e56, 0x6f56,
            0x7056, 0x7156, 0x7256, 0x7356, 0x7456, 0x7556, 0x7656, 0x7756, 0x7856, 0x7956, 0x7a56,
            0x6157, 0x6257, 0x6357, 0x6457, 0x6557, 0x6657, 0x6757, 0x6857, 0x6957, 0x6a57, 0x6b57,
            0x6c57, 0x6d57, 0x6e57, 0x6f57, 0x7057, 0x7157, 0x7257, 0x7357, 0x7457, 0x7557, 0x7657,
            0x7757, 0x7857, 0x7957, 0x7a57, 0x6158, 0x6258, 0x6358, 0x6458, 0x6558, 0x6658, 0x6758,
            0x6858, 0x6958, 0x6a58, 0x6b58, 0x6c58, 0x6d58, 0x6e58, 0x6f58, 0x7058, 0x7158, 0x7258,
            0x7358, 0x7458, 0x7558, 0x7658, 0x7758, 0x7858, 0x7958, 0x7a58, 0x6159, 0x6259, 0x6359,
            0x6459, 0x6559, 0x6659, 0x6759, 0x6859, 0x6959, 0x6a59, 0x6b59, 0x6c59, 0x6d59, 0x6e59,
            0x6f59, 0x7059, 0x7159, 0x7259, 0x7359, 0x7459, 0x7559, 0x7659, 0x7759, 0x7859, 0x7959,
            0x7a59, 0x615a, 0x625a, 0x635a, 0x645a, 0x655a, 0x665a, 0x675a, 0x685a, 0x695a, 0x6a5a,
            0x6b5a, 0x6c5a, 0x6d5a, 0x6e5a, 0x6f5a, 0x705a, 0x715a, 0x725a, 0x735a, 0x745a, 0x755a,
            0x765a, 0x775a, 0x785a, 0x795a, 0x7a5a
        )

        private const val BASE = 26

        const val MAX_VALUE = BASE + BASE * BASE - 1
        const val INVALID_VALUE: Int = -1

        val INVALID: ElementId = ElementId(INVALID_VALUE.toChar())

        fun valueOf(firstChar: Char): ElementId {
            if (BuildConfig.DEBUG) {
                Contract.requireInRangeInclusive(
                    Value("firstChar", firstChar), 'A', 'Z'
                )
            }
            return ElementId((firstChar.code - 'A'.code).toChar())
        }

        fun valueOf(firstChar: Char, secondChar: Char): ElementId {
            if (BuildConfig.DEBUG) {
                Contract.requireInRangeInclusive(
                    Value("firstChar", firstChar), 'A', 'Z'
                )
                Contract.requireInRangeInclusive(
                    Value("secondChar", secondChar), 'a', 'z'
                )
            }
            return ElementId(
                (firstChar.code * 26 + secondChar.code
                        - (('A'.code - 1) * 26 + 'a'.code)).toChar()
            )
        }
    }

    init {
        if (BuildConfig.DEBUG) {
            Contract.requireInRangeInclusive(
                Value("elementId", value.code.toShort().toInt()), INVALID_VALUE, MAX_VALUE
            )
        }
    }

    val isValid: Boolean get() = value.code.toShort() >= 0

    val elementName: String
        get() {
            val code = value.code
            if (code < BASE) {
                return ('A'.code + code).toChar().toString()
            } else {
                val buffer = ByteArray(2)
                if (FormatUtil.varHandleAvailable()) {
                    FormatUtil.setShort(buffer, 0, ELEMENT_NAME_TWO_CHARS[code - BASE])
                } else {
                    val div = code.div26()
                    buffer[0] = (('A'.code - 1) + div).toByte()
                    buffer[1] = ('a'.code + code - div * BASE).toByte()
                }
                return FormatUtil.asciiToString(buffer, 0, 2)
            }
        }

    val ordinal get() = BuildConfig.ELEMENT_ORDINALS[value.code]

    val weight get() = BuildConfig.ELEMENT_WEIGHTS[value.code]
}